workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always


stages:
  - install
  - lint
  - unit-test
  - build-client
  - e2e-test
  - build-server
  - deploy

instal_cypress_dependencies:
  stage: install
  image: node:16.13.0
  script:
    - export CYPRESS_CACHE_FOLDER=$CI_PROJECT_DIR/.cache/Cypress
    - export DEBUG=cypress:cli
    - npm ci --cache .npm --prefer-offline --ignore-scripts
  cache:
    key: DEP-CY-$CI_COMMIT_REF_SLUG # separate key fro dependencies
    paths:
      - .cache/Cypress
    policy: push
  only: # TODO trigger to produce cache
    changes:
      - package-lock.json


install_server_dependencies:
  stage: install
  image: node:16.13.0
  script:
    - cd server
    - npm ci --cache .npm --prefer-offline
  cache:
    key: DEP-S-$CI_COMMIT_REF_SLUG # separate key for dependencies
    paths:
      - server/node_modules
      - server/.npm/
    policy: push
  only: # TODO trigger to produce cache
    changes:
      - server/package-lock.json


install_client_dependencies:
  stage: install
  image: node:16.13.0
  script:
    - cd client
    - npm ci --cache .npm --prefer-offline
  cache:
    key: DEP-C-$CI_COMMIT_REF_SLUG # separate key for dependencies
    paths:
      - client/node_modules
      - client/.npm/
    policy: push
  only: # TODO trigger to produce cache
    changes:
      - client/package-lock.json


run_lint_server:
  stage: lint
  image: node:16.13.0
  needs:
    - install_server_dependencies
  script:
    - cd server
    - ls -al
    - npm run lint
  cache:
    key: DEP-S-$CI_COMMIT_REF_SLUG # separate key for dependencies
    paths:
      - server/node_modules
      - server/.npm/
    policy: pull


run_lint_client:
  stage: lint
  image: node:16.13.0
  needs:
    - install_client_dependencies
  script:
    - cd client
    - ls -al
    - npm run lint
  cache:
    key: DEP-C-$CI_COMMIT_REF_SLUG # separate key for dependencies
    paths:
      - client/node_modules
      - client/.npm/
    policy: pull


.use_server_secrets:
  before_script:
    - set -o allexport
    - source $SERVER_ENV
    - source $POSTGRES_ENV
    - set +o allexport
    - mkdir -p server/.oci
    - cat $OCI_CONFIG > server/.oci/config
    - echo -e "\nkey_file=$CI_PROJECT_DIR/server/.oci/carshare_key.pem" >> server/.oci/config
    - cat $CARSHARE_KEY > server/.oci/carshare_key.pem
    - chmod 400 server/.oci/carshare_key.pem


run_unit_tests_server:
  stage: unit-test
  image: node:16.13.0
  needs:
    - install_server_dependencies
  extends:
    - .use_server_secrets
  script:
    - cd server
    - npm run test:ci
  cache:
    key: DEP-S-$CI_COMMIT_REF_SLUG # separate key fro dependencies
    paths:
      - server/node_modules
      - server/.npm/
    policy: pull
  artifacts:
    when: always
    reports:
      junit: server/junit.xml


build_react:
  stage: build-client
  image: node:16.13.0
  needs:
    - run_lint_client
  script:
    - cd client
    - npm run build
  cache:
    - key: DEP-C-$CI_COMMIT_REF_SLUG # separate key fro dependencies
      paths:
        - client/node_modules
        - client/.npm/
      policy: pull
    - key: BUILD-C-$CI_COMMIT_REF_SLUG # separate key fro dependencies
      paths:
        - client/build
      policy: push


run_e2e_tests:
  stage: e2e-test
  image: node:16.13.0
  extends:
    - .use_server_secrets
  script:
    - export CYPRESS_baseUrl=http://localhost:3001  # overrides cypress.json bc frontend is built and running from the server in as in production on port 3001 instead of 3000
    - export CYPRESS_CACHE_FOLDER=$CI_PROJECT_DIR/.cache/Cypress
    - export DEBUG=cypress:cli
    - npm run start & wait-on http://localhost:3000
    - export NODE_ENV=test ELECTRON_RUN_AS_NODE=1  #https://docs.cypress.io/guides/continuous-integration/introduction#Running-headless-tests-without-Xvfb
    - $(npm bin)/cypress run --headless --browser firefox
  artifacts:
    when: always
    paths:
      - cypress/videos/**/*.mp4
      - cypress/screenshots/**/*.png
    expire_in: 1 week


build_backend_image:
  stage: build-server
  image: docker:20.10.17
  services:
    - name: docker:20.10.17-dind
      alias: docker
      command: [ "--tls=false" ]
  variables:
    # using "docker" as the host is only possible if you alias the service
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  extends:
    - .use_server_secrets
  script: # authenticate in gitlab registry from inside the executor
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add jq
    - export PACKAGE_VERSION=$(cat server/package.json | jq -r .version) # parses json object and returns an attribute
    - export APP_VERSION=$PACKAGE_VERSION.$CI_PIPELINE_IID # append the pipeline build version
    - echo "VERSION=$APP_VERSION" >> build.env # save artifact file
    - cd server
    - docker build -t $CI_REGISTRY_IMAGE:$APP_VERSION -f oci.prod.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$APP_VERSION # must be on the same executor with build
  artifacts:
    reports:
      dotenv: build.env # loaded in all subsequent jobs
  cache:
    key: DEP-S-$CI_COMMIT_REF_SLUG # separate key fro dependencies
    paths:
      - server/node_modules
      - server/.npm/
    policy: pull


deploy_backend:
  stage: deploy
  extends: use_server_secrets
  script:
    - chmod 400 $WS_KEY
    - ls -al
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST '
      if [ ! -d /home/ubuntu/applications/carshare/server ];
      then mkdir -p /home/ubuntu/applications/carshare/server;
      fi;
      if [ ! -d /home/ubuntu/applications/carshare/server/backup ];
      then mkdir -p /home/ubuntu/applications/carshare/server/backup;
      fi;
      if [ ! -d /home/ubuntu/applications/carshare/server/.oci ];
      then mkdir -p /home/ubuntu/applications/carshare/server/.oci;
      fi;
      '
    - scp -o StrictHostKeyChecking=no -i $WS_KEY postgres-init-db.sh server/docker-compose.oci.prod.yml ubuntu@$WS_HOST:/home/ubuntu/applications/carshare/server
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST "
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      export
      DC_IMAGE_NAME=$CI_REGISTRY_IMAGE
      DC_IMAGE_TAG=$VERSION
      JWT_KEY=${JWT_KEY}
      DATABASE_URL_PRODUCTION=${DATABASE_URL_PRODUCTION}
      DATABASE_URL_TEST=${DATABASE_URL_TEST}
      OCI_NAMESPACE=${OCI_NAMESPACE}
      OCI_BUCKET=${OCI_BUCKET}
      OCI_CLI_USER=${OCI_CLI_USER}
      OCI_CLI_FINGERPRINT=${OCI_CLI_FINGERPRINT}
      OCI_CLI_KEY_FILE=${OCI_CLI_KEY_FILE}
      OCI_CLI_TENANCY=${OCI_CLI_TENANCY}
      OCI_COMPARTMENT=${OCI_COMPARTMENT} &&
      export
      POSTGRES_USER=${POSTGRES_USER}
      POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      DATABASE_NAME=${DATABASE_NAME} &&
      cd /home/ubuntu/applications/carshare/server &&
      docker-compose -f docker-compose.oci.prod.yml down &&
      docker-compose -f docker-compose.oci.prod.yml up -d
      "

deploy_client_build:
  stage: deploy
  script:
    - ls -al
    - ls -al client/
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST '
      if [ ! -d /home/ubuntu/applications/share/nginx/html/carshare ];
      then mkdir -p /home/ubuntu/applications/share/nginx/html/carshare;
      fi;
      sudo rm -fr /home/ubuntu/applications/share/nginx/html/carshare/*;
      '
    - scp -o StrictHostKeyChecking=no -i $WS_KEY client/build/*  ubuntu@$WS_HOST:/home/ubuntu/applications/share/nginx/html/carshare/